"use strict";
var express = require('express');
var basicAuth = require('./basic-auth');
var ExpressHTTPServer = (function () {
    function ExpressHTTPServer(options) {
        options = options || {};
        this.ui = options.ui;
        this.distPath = options.distPath;
        this.username = options.username;
        this.password = options.password;
        this.cache = options.cache;
        this.gzip = options.gzip || false;
        this.app = express();
        if (options.gzip) {
            this.app.use(require('compression')());
        }
    }
    ExpressHTTPServer.prototype.serve = function (middleware) {
        var _this = this;
        var app = this.app;
        var username = this.username;
        var password = this.password;
        if (username !== undefined || password !== undefined) {
            this.ui.writeLine("adding basic auth; username=" + username + "; password=" + password);
            app.use(basicAuth(username, password));
        }
        if (this.cache) {
            app.get('/*', this.buildCacheMiddleware());
        }
        if (this.distPath) {
            app.get('/', middleware);
            app.use(express.static(this.distPath));
        }
        app.get('/*', middleware);
        return new Promise(function (resolve) {
            var listener = app.listen(process.env.PORT || 3000, function () {
                var host = listener.address().address;
                var port = listener.address().port;
                _this.ui.writeLine('HTTP server started; url=http://%s:%s', host, port);
                resolve();
            });
        });
    };
    ExpressHTTPServer.prototype.buildCacheMiddleware = function () {
        var _this = this;
        return function (req, res, next) {
            var path = req.path;
            Promise.resolve(_this.cache.fetch(path, req))
                .then(function (response) {
                if (response) {
                    _this.ui.writeLine("cache hit; path=" + path);
                    res.send(response);
                }
                else {
                    _this.ui.writeLine("cache miss; path=" + path);
                    _this.interceptResponseCompletion(path, res);
                    next();
                }
            })
                .catch(function () { return next(); });
        };
    };
    ExpressHTTPServer.prototype.interceptResponseCompletion = function (path, res) {
        var _this = this;
        var send = res.send.bind(res);
        res.send = function (body) {
            var ret = send(body);
            _this.cache.put(path, body, res)
                .then(function () {
                _this.ui.writeLine("stored in cache; path=" + path);
            })
                .catch(function () {
                var truncatedBody = body.replace(/\n/g).substr(0, 200);
                _this.ui.writeLine("error storing cache; path=" + path + "; body=" + truncatedBody + "...");
            });
            res.send = send;
            return ret;
        };
    };
    return ExpressHTTPServer;
}());
module.exports = ExpressHTTPServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzcy1odHRwLXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cHJlc3MtaHR0cC1zZXJ2ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUUxQztJQUNFLDJCQUFZLE9BQU87UUFDakIsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDO1FBRWxDLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDckIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QyxDQUFDO0lBQ0gsQ0FBQztJQUVELGlDQUFLLEdBQUwsVUFBTSxVQUFVO1FBQWhCLGlCQStCQztRQTlCQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ25CLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDN0IsSUFBSSxRQUFRLEdBQUcsSUFB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